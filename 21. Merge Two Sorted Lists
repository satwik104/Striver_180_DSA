ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        //without using in-place method, using recursion
        /*
        if(list1==NULL) return list2;
        if(list2==NULL) return list1;
        
        ListNode* ans = NULL;
        
        if(list1->val <= list2->val)
        {
            ans = list1;
            ans->next = mergeTwoLists(list1->next,list2);
        }
        else
        {
            ans = list2;
            ans->next = mergeTwoLists(list1,list2->next);
        }
        return ans;
        */
        // optimal approach using in-place methode
        if(list1==NULL) return list2;
        if(list2==NULL) return list1;
        
        if(list1->val > list2->val) swap(list1,list2);//we want list1 to be smallest
        ListNode* res = list1;
        while(list1!=NULL && list2!=NULL)
        {
            ListNode* temp = NULL;
            while(list1!=NULL && list1->val <= list2->val)
            {
                temp=list1;
                list1=list1->next;
            }
            temp->next = list2;
            swap(list1,list2);
        }
        return res;
    }
    //TC O(n+m) SC O(1)
